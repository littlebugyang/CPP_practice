#include <vector>
#include <algorithm>
using std::vector;

class Solution
{
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 计算有多少个人最终不在自己原来的位置上
     * @param n int整型 队伍总长
     * @param cutIn int整型vector 依次会插队到最前方的人的编号
     * @return int整型
     */
    int countDislocation(int n, vector<int> &cutIn)
    {
        vector<int> original;
        for (int i = 0; i < n; ++i)
            original.push_back(i + 1);

        for (int i = 0; i < cutIn.size(); ++i)
        {
            for (int j = std::find(original.begin(), original.end(), cutIn[i]) - original.begin(); j > 0; --j)
                original[j] = original[j - 1];
            original[0] = cutIn[i];
        }

        int count = 0;
        for (int i = 0; i < n; ++i)
            if (original[i] != i + 1)
                ++count;

        return count;
    }
};

int main()
{
    Solution solution;
    // vector<int> cutIn = {3, 2, 3};
    // int result = solution.countDislocation(3, cutIn);
    vector<int> cutIn = {39, 30, 43, 6, 44, 43, 46, 50, 6, 39, 23, 31, 32, 24, 36, 36, 17, 42, 5, 15, 31, 16, 30, 4, 36, 47, 34, 6, 48, 31, 39, 9, 39, 7, 38, 24, 41, 7, 26, 7, 6, 37, 15, 33, 29, 30, 22, 14, 15, 9, 1, 50, 4, 33, 9, 32, 37, 46, 32, 16, 38, 25, 48, 19, 25, 37, 21, 38, 8, 1, 46, 12, 16, 40, 28, 30, 26, 20, 10, 50, 34, 10, 38, 32, 1, 40, 46, 41, 1, 1, 47, 28, 2, 11, 37, 48, 9, 42, 13, 36, 8, 17, 44, 13, 6, 6, 15, 43, 41, 18, 49, 22, 43, 40, 28, 11, 35, 35, 32, 6, 20, 18, 14, 8, 22, 29, 35, 44, 40, 30, 27, 30, 45, 45, 20, 37, 45, 39, 13, 36, 31, 3, 20, 46, 9, 11, 18, 22, 28, 15, 18, 43, 24, 47, 47, 40, 12, 46, 45, 11, 30, 17, 19, 16, 25, 4, 37, 7, 32, 5, 3, 45, 49, 26, 49, 37, 8, 38, 4, 8, 28, 40, 44, 17, 25, 32, 13, 42, 9, 4, 47, 4, 35, 6, 16, 6, 40, 42, 32, 4, 33, 38, 16, 46, 19, 34, 37, 50, 9, 22, 17, 26, 42, 37, 44, 50, 7, 25, 48, 41, 10, 40, 37, 5, 31, 49, 34, 42, 13, 44, 19, 24, 15, 7, 33, 5, 33, 42, 30, 23, 22, 47, 48, 1, 42, 34, 50, 1, 19, 7, 35, 2, 50, 2, 33, 30, 9, 5, 11, 39, 50, 5, 33, 41, 36, 18, 29, 39, 44, 18, 6, 48, 47, 12, 3, 32, 37, 16, 33, 36, 24, 37, 10, 47, 36, 35, 10, 37, 11, 45, 19, 31, 50, 32, 1, 50, 33, 20, 49, 15, 20, 29, 46, 47, 9, 31, 13, 23, 17, 23, 35, 40, 35, 26, 27, 13, 3, 9, 31, 11, 42, 18, 16, 9, 45, 6, 40, 10, 28, 29, 35, 1, 37, 39, 28, 22, 39, 32, 17, 44, 15, 11, 37, 9, 18, 5, 10, 31, 24, 27, 33, 5, 37, 37, 18, 37, 26, 29, 19, 23, 39, 35, 19, 37, 43, 33, 10, 30, 40, 45, 29, 11, 28, 43, 12, 50, 41, 4, 8, 22, 6, 23, 39, 24, 17, 18, 43, 33, 46, 17, 40, 36, 30, 42, 25, 25, 20, 25, 21, 4, 38, 6, 14, 4, 15, 17, 13, 13, 39, 50, 3, 50, 10, 31, 29, 31, 33, 40, 35, 27, 2, 1, 10, 6, 13, 27, 1, 17, 23, 31, 25, 6, 37, 1, 2, 23, 10, 46, 44, 14, 47, 9, 47, 41, 37, 3, 5, 29, 8, 12, 45, 28, 32, 17, 22, 12, 4, 12, 13, 19, 2, 12, 35, 49, 20, 3, 9, 40, 2, 24, 11, 42, 5, 11, 41, 31, 24, 13, 31, 12, 29, 2, 2, 36, 41, 45, 48, 39, 2, 10, 9, 36, 49, 29, 11, 8, 29, 50, 26, 4, 21, 18, 25, 17, 11, 7, 41, 26, 25, 25, 47, 5, 29, 23, 24, 47, 5, 37, 43, 49, 12, 41, 6, 44, 32, 40, 45, 36, 17, 22, 13, 50, 43, 44, 48, 20, 2, 32, 9, 11, 37, 45, 20, 47, 8, 8, 3, 3, 12, 10, 19, 12, 46, 33, 37, 19, 39, 13, 40, 46, 22, 46, 21, 49, 13, 6, 22, 6, 20, 3, 29, 22, 24, 49, 41, 27, 8, 41, 31, 24, 9, 41, 25, 46, 9, 44, 40, 4, 46, 43, 14, 32, 26, 41, 29, 17, 3, 39, 41, 38, 37, 17, 43, 11, 36, 23, 17, 28, 34, 49, 26, 34, 47, 11, 6, 37, 1, 26, 28, 10, 1, 15, 33, 45, 33, 13, 10, 8, 22, 28, 39, 32, 30, 36, 33, 39, 18, 3, 14, 1, 46, 47, 22, 32, 50, 21, 27, 9, 5, 31, 3, 19, 5, 32, 41, 46, 37, 37, 7, 21, 40, 35, 11, 25, 44, 25, 2, 31, 2, 1, 12, 33, 36, 14, 27, 44, 5, 2, 41, 48, 9, 48, 6, 35, 24, 38, 40, 21, 4, 38, 4, 13, 43, 41, 5, 25, 32, 13, 12, 43, 2, 26, 37, 16, 13, 39, 15, 9, 44, 47, 3, 5, 45, 15, 30, 49, 21, 1, 14, 49, 10, 41, 30, 50, 30, 7, 12, 23, 17, 31, 26, 15, 28, 5, 6, 19, 8, 29, 11, 23, 37, 45, 24, 39, 15, 7, 47, 33, 28, 19, 38, 44, 20, 23, 13, 5, 39, 39, 49, 13, 13, 41, 28, 43, 50, 16, 19, 31, 3, 36, 46, 47, 42, 48, 50, 50, 44, 46, 29, 22, 29, 32, 31, 1, 4, 22, 22, 38, 36, 40, 50, 27, 30, 36, 20, 13, 47, 44, 22, 10, 19, 19, 43, 44, 25, 19, 38, 21, 3, 38, 21, 17, 6, 31, 13, 23, 28, 23, 4, 4, 16, 46, 5, 23, 21, 21, 21, 16, 8, 10, 35, 35, 8, 31, 25, 10, 7, 1, 37, 32, 28, 50, 15, 45, 22, 25, 10, 3, 28, 3, 26, 32, 35, 40, 15, 30, 1, 45, 15, 38, 27, 8, 2, 15, 36, 10, 9, 46, 38, 48, 42, 12, 40, 25, 48, 50, 42, 27, 15, 29, 22, 19, 44, 39, 23, 28, 20, 46, 27, 27, 22, 17, 49, 16, 22, 40, 12, 45, 6, 21, 33, 27, 9, 14, 32, 33, 41, 26, 47, 5, 50, 46, 43, 17, 23, 16, 40, 29, 30, 31, 29, 10, 32, 1, 47, 48, 43, 12, 34, 7, 42, 10, 31, 6, 32, 30, 16, 37, 32, 26, 31, 3, 45, 38, 44, 49, 32, 9, 44, 25, 37, 46, 17, 31, 48, 30, 50, 50, 32, 7, 7, 15, 13, 30, 38, 22, 49, 16, 37, 24, 22, 29, 3, 2, 49, 9, 22, 33, 37, 7, 29, 12, 7, 5, 41, 38, 38, 10, 8, 7, 13, 22, 20, 32, 45, 3, 14, 44, 47, 36};
    int result = solution.countDislocation(50, cutIn);
    return 0;
}