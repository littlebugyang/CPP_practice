#include <vector>
#include <algorithm>
using std::max;
using std::vector;

class Solution
{
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 计算01背包问题的结果
     * @param V int整型 背包的体积
     * @param n int整型 物品的个数
     * @param vw int整型vector<vector<>> 第一维度为n,第二维度为2的二维数组,vw[i][0],vw[i][1]分别描述i+1个物品的vi,wi
     * @return int整型
     */

    int knapsack(int V, int n, vector<vector<int>> &vw)
    {
        vector<vector<int>> stateTransitionTable(n + 1);
        for (int i = 0; i < n + 1; ++i)
            stateTransitionTable[i] = vector<int>(V + 1);

        for (int i = 1; i < n + 1; ++i)
        {
            for (int j = 1; j < V + 1; ++j)
                if (j >= vw[i - 1][0]) // 根据推导式得来。关于 i-1，因为 i 是从状态转移表的第二行开始的，所以 vw 的第 1 行要对应表的第 2 行，所以取 vw 的对应值时，i 要减 1
                    stateTransitionTable[i][j] = max(stateTransitionTable[i - 1][j - vw[i - 1][0]] + vw[i - 1][1], stateTransitionTable[i - 1][j]);
                else // 否则该背包容量放不下，就跟没这个物品一样
                    stateTransitionTable[i][j] = stateTransitionTable[i - 1][j];
        }

        return stateTransitionTable[n][V];
    }
};

int main()
{
    // vector<vector<int>> vw = {{1, 3}, {10, 4}};
    // Solution solution;
    // solution.knapsack(10, 2, vw);

    vector<vector<int>> vw = {{49, 241}, {25, 724}, {91, 780}, {76, 824}, {92, 968}, {53, 276}, {6, 492}, {53, 745}, {62, 136}, {94, 568}};
    Solution solution;
    int result = solution.knapsack(200, 10, vw);

    // vector<vector<int>> vw = {{183, 153}, {28, 164}, {163, 145}, {53, 155}, {18, 37}, {56, 14}, {159, 126}, {123, 154}, {116, 189}, {139, 174}, {171, 97}, {83, 119}, {111, 188}, {195, 89}, {10, 135}, {173, 7}, {64, 15}, {108, 100}, {36, 192}, {134, 179}, {137, 105}, {84, 52}, {91, 96}, {127, 49}, {79, 128}, {157, 24}, {57, 104}, {140, 17}, {117, 6}, {174, 122}, {104, 20}, {94, 73}, {103, 17}, {19, 170}, {71, 107}, {114, 122}, {32, 99}, {56, 99}, {20, 42}, {56, 88}, {76, 59}, {114, 28}, {93, 72}, {101, 86}, {198, 50}, {94, 40}, {30, 99}, {9, 24}, {148, 182}, {136, 158}, {22, 130}, {178, 199}, {190, 67}, {117, 114}, {82, 81}, {79, 89}, {163, 101}, {121, 178}, {129, 129}, {110, 78}, {4, 111}, {154, 129}, {5, 165}, {30, 100}, {63, 167}, {171, 200}, {32, 5}, {61, 28}, {149, 79}, {123, 40}, {45, 143}, {51, 42}, {76, 174}, {195, 121}, {43, 9}, {70, 9}, {126, 77}, {163, 95}, {150, 153}, {60, 173}, {24, 51}, {118, 87}, {182, 29}, {196, 95}, {164, 73}, {65, 78}, {109, 3}, {190, 172}, {135, 158}, {96, 91}, {149, 162}, {37, 103}, {44, 133}, {169, 96}, {176, 143}, {60, 186}, {159, 114}, {166, 28}, {14, 105}, {102, 57}, {35, 144}, {48, 180}, {138, 149}, {165, 143}, {76, 94}, {55, 6}, {189, 84}, {29, 151}, {150, 86}, {59, 44}, {34, 96}, {13, 189}, {12, 92}, {190, 87}, {41, 82}, {92, 42}, {114, 117}, {79, 18}, {165, 78}, {42, 83}, {115, 117}, {80, 139}, {141, 109}, {51, 114}, {19, 144}, {129, 173}, {38, 146}, {96, 196}, {7, 154}, {164, 80}, {39, 55}, {166, 177}, {32, 111}, {143, 151}, {52, 133}, {173, 64}, {21, 92}, {85, 17}, {148, 23}, {170, 192}, {78, 171}, {84, 66}, {67, 112}, {173, 128}, {153, 59}, {72, 7}, {17, 128}, {51, 200}, {176, 142}, {127, 157}, {128, 67}, {37, 21}, {40, 177}, {123, 186}, {50, 153}, {104, 185}, {164, 200}, {100, 194}, {33, 151}, {35, 41}, {72, 32}, {75, 59}, {13, 85}, {164, 109}, {39, 50}, {64, 34}, {154, 14}, {35, 131}, {69, 127}, {125, 76}, {87, 172}, {197, 133}, {102, 150}, {96, 150}, {80, 169}, {26, 126}, {101, 55}, {37, 46}, {36, 55}, {176, 113}, {70, 140}, {193, 199}, {192, 184}, {158, 170}, {125, 155}, {25, 9}, {99, 31}, {122, 139}, {28, 174}, {129, 78}, {16, 181}, {188, 49}, {65, 42}, {197, 94}, {191, 45}, {88, 188}, {165, 11}, {91, 124}, {100, 65}, {191, 18}};
    // Solution solution;
    // int result = solution.knapsack(200, 200, vw);

    // vector<vector<int>> vw = {{166, 39}, {199, 87}, {190, 58}, {103, 53}, {62, 150}, {166, 42}, {153, 84}, {46, 72}, {98, 1}, {68, 52}, {181, 39}, {19, 110}, {68, 56}, {46, 32}, {68, 191}, {174, 195}, {106, 50}, {200, 102}, {32, 61}, {123, 49}, {76, 88}, {80, 57}, {195, 181}, {187, 100}, {154, 66}, {105, 88}, {109, 166}, {82, 30}, {140, 97}, {49, 101}, {122, 140}, {2, 52}, {71, 20}, {84, 200}, {25, 25}, {158, 16}, {119, 188}, {151, 164}, {118, 56}, {184, 69}, {32, 167}, {37, 57}, {113, 168}, {149, 166}, {123, 16}, {37, 129}, {85, 136}, {164, 47}, {103, 77}, {82, 44}, {73, 181}, {106, 137}, {93, 80}, {66, 52}, {195, 173}, {8, 123}, {51, 95}, {63, 200}, {192, 64}, {43, 140}, {11, 125}, {81, 197}, {77, 177}, {107, 106}, {193, 110}, {66, 153}, {177, 1}, {21, 38}, {80, 158}, {121, 63}, {160, 37}, {81, 5}, {109, 139}, {96, 78}, {146, 51}, {116, 9}, {74, 62}, {166, 177}, {153, 113}, {31, 126}, {149, 103}, {86, 64}, {167, 174}, {15, 109}, {110, 142}, {117, 61}, {86, 135}, {83, 165}, {21, 146}, {16, 105}, {174, 3}, {145, 69}, {170, 29}, {180, 125}, {99, 31}, {66, 139}, {27, 134}, {92, 33}, {45, 131}, {129, 15}, {1, 78}, {166, 96}, {110, 27}, {56, 185}, {83, 156}, {182, 145}, {142, 143}, {26, 15}, {105, 122}, {186, 16}, {66, 36}, {26, 48}, {131, 77}, {44, 3}, {105, 112}, {186, 188}, {80, 176}, {115, 70}, {62, 90}, {125, 186}, {111, 42}, {59, 24}, {114, 200}, {151, 17}, {65, 163}, {120, 147}, {174, 6}, {87, 158}, {148, 67}, {47, 8}, {13, 174}, {140, 164}, {59, 76}, {157, 73}, {80, 43}, {12, 159}, {97, 2}, {150, 76}, {184, 85}, {30, 145}, {89, 138}, {95, 135}, {72, 168}, {114, 14}, {49, 33}, {140, 94}, {95, 148}, {132, 15}, {65, 40}, {124, 47}, {162, 150}, {29, 34}, {185, 199}, {136, 199}, {81, 118}, {170, 72}, {193, 94}, {63, 146}, {6, 191}, {163, 158}, {151, 165}, {140, 166}, {49, 42}, {60, 116}, {76, 198}, {119, 152}, {6, 20}, {8, 137}, {103, 118}, {168, 103}, {165, 99}, {129, 110}, {145, 104}, {15, 36}, {161, 189}, {113, 38}, {23, 186}, {39, 112}, {98, 81}, {84, 45}, {51, 5}, {22, 174}, {43, 172}, {107, 70}, {59, 177}, {175, 189}, {196, 5}, {195, 2}, {129, 39}, {152, 15}, {113, 89}, {69, 176}, {145, 5}, {132, 76}, {170, 64}, {147, 184}, {30, 46}, {186, 112}, {1, 6}, {177, 103}};
    // Solution solution;
    // int result = solution.knapsack(200, 200, vw);
    return 0;
}